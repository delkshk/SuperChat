{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["firebase","apps","length","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","SignIn","onClick","provider","GoogleAuthProvider","signInWithPopup","ChatRoom","messagesRef","collection","query","orderBy","limit","useCollectionData","idField","messages","useState","formValue","setFormValue","sendMessage","e","a","preventDefault","currentUser","uid","photoURL","displayName","add","text","createdAt","FieldValue","serverTimestamp","map","msg","ChatMessage","message","id","onSubmit","value","onChange","target","placeholder","type","disabled","props","messageClass","className","App","useAuthState","user","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yRAWKA,IAASC,KAAKC,QACjBF,IAASG,cAAc,CACrBC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAMnB,IAAMC,EAAOZ,IAASY,OAChBC,EAAYb,IAASa,YAiB3B,SAASC,IAKP,OACE,wBAAQC,QALe,WACvB,IAAMC,EAAW,IAAIhB,IAASY,KAAKK,mBACnCL,EAAKM,gBAAgBF,IAGrB,oBAIJ,SAASG,IACP,IAAMC,EAAcP,EAAUQ,WAAW,YACnCC,EAAQF,EAAYG,QAAQ,aAAaC,MAAM,IAFnC,EAICC,YAAkBH,EAAO,CAAEI,QAAS,OAAhDC,EAJW,sBAKgBC,mBAAS,IALzB,mBAKXC,EALW,KAKAC,EALA,KAOZC,EAAW,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DAClBD,EAAEE,iBADgB,EAEqBtB,EAAKuB,YAApCC,EAFU,EAEVA,IAAKC,EAFK,EAELA,SAAUC,EAFL,EAEKA,YAFL,SAGZlB,EAAYmB,IAAI,CACpBC,KAAMX,EACNY,UAAWzC,IAASa,UAAU6B,WAAWC,kBACzCP,MACAE,cACAD,aARgB,OAUlBP,EAAa,IAVK,2CAAH,sDAajB,OACE,gCACE,8BACGH,GAAYA,EAASiB,KAAI,SAAAC,GAAG,OAAI,cAACC,EAAD,CAA0BC,QAASF,GAAjBA,EAAIG,SAEzD,uBAAMC,SAAUlB,EAAhB,UACE,uBAAOmB,MAAOrB,EAAWsB,SAAU,SAACnB,GAAD,OAAOF,EAAaE,EAAEoB,OAAOF,QAAQG,YAAY,uBACpF,wBAAQC,KAAK,SAASC,UAAW1B,EAAjC,gCAYR,SAASiB,EAAYU,GAAQ,IAAD,EACmBA,EAAMT,QAA3CP,EADkB,EAClBA,KAAMJ,EADY,EACZA,IAAeE,GADH,EACPD,SADO,EACGC,aACvBmB,EAAerB,IAAQxB,EAAKuB,YAAYC,IAAM,OAAS,WAC7D,OAGE,sBAAKsB,UAAS,kBAAaD,GAA3B,UACE,+BAAOnB,IAEP,4BAAIE,OAMKmB,MA/Ef,WAAgB,IAAD,EAEEC,YAAahD,GAArBiD,EAFM,oBAIb,OACE,qBAAKH,UAAU,MAAf,SAEE,kCACGG,EAAO,cAAC1C,EAAD,IAAe,cAACL,EAAD,SCzBhBgD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.58b712aa.chunk.js","sourcesContent":["import React, { useRef, useState } from 'react';\nimport './style.scss';\n\n\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\nif (!firebase.apps.length) {\n  firebase.initializeApp({\n    apiKey: \"AIzaSyA5iPkYigcQOsWI9zL0GGL7OwPr5cv1gBw\",\n    authDomain: \"superchat-ff4a8.firebaseapp.com\",\n    databaseURL: \"https://superchat-ff4a8.firebaseio.com\",\n    projectId: \"superchat-ff4a8\",\n    storageBucket: \"superchat-ff4a8.appspot.com\",\n    messagingSenderId: \"227744905208\",\n    appId: \"1:227744905208:web:07fdfe0c4b6781512fc80d\",\n    measurementId: \"G-396BE5F9TP\"\n\n  })\n}\n\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\nfunction App() {\n\n  const [user] = useAuthState(auth);\n\n  return (\n    <div className=\"App\">\n\n      <section>\n        {user ? <ChatRoom /> : <SignIn />}\n      </section>\n    </div>\n  );\n}\n\n\nfunction SignIn() {\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  }\n  return (\n    <button onClick={signInWithGoogle}>Google</button>\n  )\n}\n\nfunction ChatRoom() {\n  const messagesRef = firestore.collection(\"messages\");\n  const query = messagesRef.orderBy('createdAt').limit(25);\n\n  const [messages] = useCollectionData(query, { idField: 'id' });\n  const [formValue, setFormValue] = useState('');\n\n  const sendMessage = async (e) => {\n    e.preventDefault();\n    const { uid, photoURL, displayName } = auth.currentUser;\n    await messagesRef.add({\n      text: formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      displayName,\n      photoURL\n    })\n    setFormValue('');\n  }\n\n  return (\n    <div>\n      <div>\n        {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}\n      </div>\n      <form onSubmit={sendMessage}>\n        <input value={formValue} onChange={(e) => setFormValue(e.target.value)} placeholder=\"Diga alguma coisa!\" />\n        <button type=\"submit\" disabled={!formValue}>ðŸ’Œ</button>\n      </form>\n    </div>\n  )\n\n}\n\nfunction SignOut() {\n  return auth.currentUser && (\n    <button onClick={() => auth.signOut()}>Desconectar</button>\n  )\n}\nfunction ChatMessage(props) {\n  const { text, uid, photoURL, displayName } = props.message;\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n  return (\n\n\n    <div className={`message ${messageClass}`}>\n      <span>{displayName}</span>\n      {/* <img src={photoURL || 'https://api.adorable.io/avatars/23/abott@adorable.png'} /> */}\n      <p>{text}</p>\n    </div>\n\n\n  )\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}